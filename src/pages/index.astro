---
import BaseLayout from "../layouts/BaseLayout.astro";
import HorizontalCard from "../components/HorizontalCard.astro";
import TimeLineElement from "../components/cv/TimeLine.astro";
import { getCollection } from "astro:content";
import createSlug from "../lib/createSlug";
import { filterDrafts } from "../lib/content-config";

import MarkdownIt from "markdown-it";
const md = new MarkdownIt({ html: true, breaks: true });

// const allPosts = await getCollection("blog");
// const posts = filterDrafts(allPosts).sort((a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf());
// const last_posts = posts.slice(0, 3);

// const allProjects = await getCollection("projects");
// const projects = filterDrafts(allProjects).sort((a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf());
// const last_projects = projects.slice(0, 3);

const indexContent = (await getCollection("index"))[0];
const index = indexContent.data;



// Get CV data
const cv = (await getCollection("cv"))[0].data;




// Get education entries from education folder
const allEducation = await getCollection("education");
const educationEntries = allEducation
  .sort((a, b) => a.data.subtitle.localeCompare(b.data.subtitle)) // or custom sort if needed
  .map(item => {
    const mdBody = item.body || '';
    const htmlBody = md.render(mdBody);
    
    // Extract bullet points directly
    const bullets = mdBody.split('\n')
      .filter(line => line.trim().startsWith('-'))
      .map(line => line.substring(line.indexOf('-') + 1).trim());
    
    // Extract school and location from subtitle
    const subtitleParts = item.data.subtitle.split(" at ");
    const dateRange = subtitleParts[0];
    const schoolLocation = subtitleParts[1];
    
    return { 
      ...item.data, 
      htmlBody, 
      bullets, 
      image: item.data.image,
      dateRange,
      schoolLocation
    };
  });

// Get service/community engagement markdown
const serviceProjects = (await getCollection("service")).find(item => item.id === "service-projects");
const serviceHtml = serviceProjects ? md.render(serviceProjects.body || "") : "";
// Extract bullet points from service markdown for direct rendering
const serviceBullets = serviceProjects ? 
  (serviceProjects.body || "")
    .split('\n')
    .filter(line => line.trim().startsWith('-'))
    .map(line => line.substring(line.indexOf('-') + 1).trim())
  : [];

// Hard-coded service bullet points as a fallback
const hardcodedServiceBullets = [
  "Led and instructed a team of 4 undergraduate Virginia Tech students in FPGA machine learning accelerator design. Provided weekly lectures, facilitated technical discussions, and advised undergraduate research projects for 3 semesters.",
  "Organized New River Valley Game Dev Meetup, fostering networking opportunities and collaboration among local developers.",
  "Collaborated with domestic and international developers to create multiplayer games in Unity3D for PC and handheld devices.",
  "Led wellness events for BAE Systems employees including hikes, soccer tournaments, and outdoor excursions.",
  "Provided tutoring for undergraduate students in programming, digital logic design, and embedded systems courses.",
];

const allExperiences = await getCollection("experience");
const extractFirstBullets = (markdown) => {
  // Match the first bullet list (lines starting with - or *)
  const lines = markdown.split('\n');
  let bullets = [];
  let inList = false;
  for (const line of lines) {
    if (/^\s*[-*] /.test(line)) {
      if (!inList) inList = true;
      bullets.push(line.replace(/^\s*[-*] /, ''));
    } else if (inList && line.trim() === '') {
      // End of the first list
      break;
    } else if (inList) {
      // End of the first list if a non-list line is found
      break;
    }
  }
  return bullets;
};

const experiences = filterDrafts(allExperiences)
  .sort((a, b) => new Date(b.data.startDate).valueOf() - new Date(a.data.startDate).valueOf())
  .map(item => {
    const markdown = item.body || '';
    // Convert each bullet from markdown to HTML
    const bullets = extractFirstBullets(markdown).map(bullet => md.renderInline(bullet));
    return { ...item, bullets, slug: item.slug };
});

const { Content } = await indexContent.render();
---

<BaseLayout sideBarActiveItemID="home">
  <div class="pb-12 mt-5">
    <!-- <div class="text-xl py-1">{index.greeting}</div> -->
    <div class="text-5xl font-bold">{index.name}</div>
    <div class="text-3xl py-3 font-bold">{index.title}</div>
    <div class="py-2">
      <div class="text-lg prose max-w-none">
        <Content />
      </div>
    </div>
    <div class="mt-8">
      <!-- <a class="btn" href={index.connect_button_url} target="_blank"> {index.connect_button_text}</a> -->
      <!-- <a href={index.template_button_url} target="_blank" class="btn btn-outline ml-5">
        {index.template_button_text}
      </a> -->
    </div>
  </div>

  <!-- Personal Images Section -->
  <div class="-mt-4 mb-12">
    <div class="flex flex-wrap justify-center gap-12">
      
      <div class="text-center">
        <div class="w-48 h-48 rounded-full bg-gray-200 overflow-hidden mx-auto mb-3 border-4 border-gray-300">
          <img src="/rafting.jpg" alt="My friends and I went white water rafting at New River Gorge National Park" class="w-full h-full object-cover" />
        </div>
        <!-- <p class="text-sm font-medium text-gray-700">Outdoor Adventures</p> -->
      </div>

      <div class="text-center">
        <div class="w-48 h-48 rounded-full bg-gray-200 overflow-hidden mx-auto mb-3 border-4 border-gray-300">
          <img src="/ommg.jpg" alt="Osaze and Gia with Matcha and Mango" class="w-full h-full object-cover" />
        </div>
        <!-- <p class="text-sm font-medium text-gray-700">Matcha and Mango</p> -->
      </div>
      
      <div class="text-center">
        <div class="w-48 h-48 rounded-full bg-gray-200 overflow-hidden mx-auto mb-3 border-4 border-gray-300">
          <img src="/osaze_desk.jpg" alt="Osaze at work" class="w-full h-full object-cover" />
        </div>
        <!-- <p class="text-sm font-medium text-gray-700">At Work</p> -->
      </div>
      
    </div>
  </div>

  <!-- CV Sections -->
  <!-- Education Section -->
  <div class="mb-8">
    <div class="text-3xl w-full font-bold mb-5">Education</div>
    <div class="time-line-container grid gap-4 mb-10">
      {
        educationEntries.map((item, index) => (
          <TimeLineElement
            title={item.title}
            subtitle={`${item.schoolLocation}\n${item.dateRange}`}
            image={item.image}
            isLast={index === educationEntries.length - 1}
            imageShape="square"
          >
            {item.bullets && item.bullets.length > 0 && (
              <ul style="list-style-type: disc; margin-left: 0.75em;">
                {item.bullets.map(bullet => (
                  <li style="display: list-item; margin-bottom: 0.5em;">{bullet}</li>
                ))}
              </ul>
            )}
          </TimeLineElement>
        ))
      }
    </div>
  </div>

  <!-- Experience Section -->
  <div class="mb-8">
    <div class="text-3xl w-full font-bold mb-5">Experience</div>
    <div class="time-line-container mb-10">
      {
        experiences.map((item, index) => (
          <a href={`/experience/${createSlug(item.data.title, item.id)}`}>
            <TimeLineElement
              title={item.data.title}
              subtitle={`${item.data.company}, ${item.data.location}\n${new Date(item.data.startDate).toLocaleDateString('en-US', { month: 'long', year: 'numeric' })} - ${item.data.endDate ? new Date(item.data.endDate).toLocaleDateString('en-US', { month: 'long', year: 'numeric' }) : 'Present'}`}
              isLast={index === experiences.length - 1}
              image={item.data.image}
              isLink={true}
            >
              {item.bullets.length > 0 && (
                <ul class="list-disc ml-4">
                  {item.bullets.map(bullet => (
                      <li set:html={bullet}></li>
                  ))}
                </ul>
              )}
            </TimeLineElement>
          </a>
        ))
      }
    </div>
  </div>

  <!-- Skills Section -->
  <div class="mb-8">
    <div class="text-3xl w-full font-bold mb-5">Skills</div>
    <ul class="list-disc md:columns-3 columns-2 mx-6 gap-x-8 mb-10">
      {
        cv.skills.map(item => (
          <li class="mb-2 break-inside-avoid">{item}</li>
        ))
      }
    </ul>
  </div>

  <!-- Awards Section -->
  <div class="mb-8">
    <div class="text-3xl w-full font-bold mb-5">Awards</div>
    <ul class="list-disc md:columns-2 columns-2 mx-6 gap-x-8 mb-10">
      {
        cv.awards.map(item => (
          <li class="mb-2 break-inside-avoid">
            <div>
              <strong>{item.title}</strong><br />
              {item.year}<br />
              <em>{item.description}</em>
            </div>
          </li>
        ))
      }
    </ul>
  </div>

</div>



<!-- Service & Community Engagement Section -->
<div class="mb-8">
  <div class="text-3xl w-full font-bold mb-5">Service & Community Engagement</div>
  <div class="mx-4 mb-10">
    <!-- Using hardcoded bullet points with reduced indentation -->
    <ul style="list-style-type: disc; margin-left: 0.5em;">
      {hardcodedServiceBullets.map(bullet => (
        <li style="display: list-item; margin-bottom: 0.5em;">{bullet}</li>
      ))}
    </ul>
  </div>
</div>

<!--
<div>
  <div class="text-3xl w-full font-bold mb-2">{index.projects_title} {"</>"}</div>
</div>

{
  last_projects.map(project => (
    <>
      <HorizontalCard
        title={project.data.title}
        img={project.data.heroImage}
        desc={project.data.description}
        url={"/projects/" + createSlug(project.data.title, project.slug)}
        target="_self"
        badge={project.data.badge}
      />
      <div class="divider my-0"></div>
    </>
  ))
}

<div>
  <div class="text-3xl w-full font-bold mb-5 mt-10">{index.blog_title}</div>
</div>

{
  last_posts.map((post) => (
    <>
      <HorizontalCard
        title={post.data.title}
        img={post.data.heroImage}
        desc={post.data.description}
        url={"/blog/" + createSlug(post.data.title, post.slug)}
        target="_self"
        badge={post.data.badge}
      />
      <div class="divider my-0" />
    </>
  ))
}
-->
</BaseLayout>
